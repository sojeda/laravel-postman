<?php

namespace Phpsa\LaravelPostman;

use ReflectionClass;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Route;

class LaravelPostmanCommand extends Command
{
    protected $helper;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'postman:export';
    protected $name = 'postman:export';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Exports Laravel API routes to a JSON file usign Postman import format';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct(Helper $helper)
    {
        $this->helper = $helper;
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        $collectionName = $this->getCollectionName();
        $collectionDescription = $this->getCollectionDescription();
        $collection = $this->helper->getCollectionStructure(
            $collectionName,
            $collectionDescription
        );

        foreach ($this->getRoutes() as $folderName => $folderRoutes) {

            $items = [];
            foreach ($folderRoutes as $route) {

                $items = array_merge($this->getRouteItems($route), $items);
            }

            $collection['item'][] = [
                'name' => $folderName,
                'description' => '',
                'item' => $items,
            ];
        }

        file_put_contents(
            $this->helper->getExportDirectory() . 'postman.json',
            json_encode($collection)
        );
    }

    /**
     * Returns an array of route items (route + method) for the given route
     *
     * @param Illuminate\Routing\Route $route
     * @return array
     */
    protected function getRouteItems(\Illuminate\Routing\Route $route)
    {
        $baseURL = $this->helper->getBaseURL();
        $path = $this->helper->replaceGetParameters($route->uri());
        $routeName = $route->getName();
        $routeNameFinal = !empty($routeName) ? $routeName : $path;
        $methods = $route->methods();
        $items = [];

        foreach ($methods as $method) {

            if ($method === 'HEAD' && config('postman.skipHEAD', true)) {

                continue;
            }
            $body = $this->getBody($route, $method);
            $docs = $this->getDocs($route);
            $items[] = $this->getItemStructure(
                $routeNameFinal,
                $baseURL,
                $path,
                $method,
                $body,
                $docs
            );
        }

        return $items;
    }

    /**
     * Returns an array with postman item format
     *
     * @param string $routeName
     * @param string $baseURL
     * @param string $path
     * @param string $method
     * @param string $body
     * @return string
     */
    protected function getItemStructure(
        $routeName,
        $baseURL,
        $path,
        $method,
        $body,
        $docs
    ) {


        $parts = explode("\n", $docs);
        $methodComment = trim($parts[1], "\t* ");

        // $args = $classMethod->getParameters();
        // dd($parts, $args, $docs, $method_comment);

        return [
            'name' => $routeName,
            'request' => [
                'description' => $methodComment,
                'url' => $baseURL . $path,
                'method' => $method,
                'body' => $body,
            ],
            'response' => [],
        ];
    }

    /**
     * Returns the user's collection name
     *
     * @return string
     */
    protected function getCollectionName()
    {
        $configCollectionName = config('postman.collectionName');

        if (!empty($configCollectionName)) {

            return $configCollectionName;
        }

        return $this->ask('Enter collection name', 'LaravelPostman Collection');
    }

    /**
     * Returns the user's collection description
     *
     * @return string
     */
    protected function getCollectionDescription()
    {
        $configCollectionDescription = config('postman.collectionDescription');

        if (!empty($configCollectionDescription)) {

            return $configCollectionDescription;
        }

        return $this->ask(
            'Enter collection description',
            'Postman collection generated by LaravelPostman'
        );
    }

    /**
     * Returns an array of API routes organized by folders
     *
     * @return array
     */
    protected function getRoutes()
    {
        $resultRoutes = [];
        $apiPrefix = $this->helper->getApiPrefix();
        $apiPrefixLength = strlen($apiPrefix);

        foreach (Route::getRoutes() as $route) {

            $path = $route->uri();
            if (substr($path, 0, $apiPrefixLength) !== $apiPrefix) {
                $this->info('Omiting ' . $path);

                continue;
            }

            $routeFolder = $this->helper->getRouteFolder($route);
            if (!isset($resultRoutes[$routeFolder])) {
                $resultRoutes[$routeFolder] = [];
            }

            $resultRoutes[$routeFolder][] = $route;
        }

        return $resultRoutes;
    }

    /**
     * Returns an postman body array for the given route
     *
     * @param Illuminate\Routing\Route $route
     * @param string $method
     * @return array
     */
    protected function getBody($route, $method)
    {

        $postmanParams = $this->getRouteParams($route, $method);

        if (empty($postmanParams)) {
            return [];
        }

        $body['mode'] = 'urlencoded';
        $body['urlencoded'] = [];
        foreach ($postmanParams as $param) {
            $body['urlencoded'][] = [
                'key' => $param,
                'value' => '',
                'enabled' => true,
            ];
        }

        return $body;
    }

    /**
     * Returns an array of the given route parameters
     *
     * @param Illuminate\Routing\Route $route
     * @param string $method
     * @return array
     */
    protected function getRouteParams(\Illuminate\Routing\Route $route, $method)
    {
        if ($method === 'GET' || $method === 'DELETE') {
            return [];
        }

        if (!$this->helper->canGetPostmanModel($route)) {

            return [];
        }

        $postmanModel = $this->helper->getPostmanModel($route);

        if (
            !is_object($postmanModel)
            || !method_exists($postmanModel, 'getPostmanParams')
        ) {

            return [];
        }

        return $postmanModel->getPostmanParams();
    }

    protected function getDocs(\Illuminate\Routing\Route $route)
    {
        $class = new ReflectionClass($route->getController());
        $classMethod = $class->getMethod($route->getActionMethod());
        return $classMethod->getDocComment();
    }
}
